<?php
///////////////////////////////////

// JS Spring Lobby Interface

// By CarRepairer

// License: GPL 2

///////////////////////////////////

/*
Todo:
server player list
offline single player
compare local client version to live, periodically
join a battle without mod, modoption scripttags are ignored, download mod, need to rescan the modoptions
update subscriptions to use topic
bots
startbox fix
always joining new game with "secret"
jugger
*/

//google
$page = @file_get_contents('http://code.google.com/p/springweblobby/source/list');
$lastRev = '??';
if( $page )
{
	preg_match( '/<a href="detail\?r=(\d*)">/', $page, $matches );
	$lastRev = isset( $matches[1] ) ? $matches[1] : '??';
}

$lobbytop = 10;
$appletsize = 0;
$test = false;
if( $test )
{
	$lobbytop = 200;
	$appletsize = 150;
}
?>

<!DOCTYPE HTML>
<html style="height:90%; width:90%">
<head>
	<title>Spring Web Lobby</title>
	
	<link rel="icon" type="image/png" href="img/blobby-small.png" />
	<!-- link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/dojo/1.6/dijit/themes/tundra/tundra.css" / -->
	<link rel="stylesheet" type="text/css" href="http://ajax.googleapis.com/ajax/libs/dojo/1.7.2/dijit/themes/claro/claro.css" />
	<style type="text/css">
		@import "http://ajax.googleapis.com/ajax/libs/dojo/1.7.2/dojox/grid/resources/Grid.css";
		@import "http://ajax.googleapis.com/ajax/libs/dojo/1.7.2/dojox/grid/resources/claroGrid.css";
		.dojoxGrid table { margin: 0; } html, body { width: 100%; height: 100%; margin: 10px; }
		
				.smallIcon
		{
			width: 16px;
			height: 16px;
			background-repeat: no-repeat;
		}
		.tallIcon
		{
			width: 16px;
			height: 32px;
			background-repeat: no-repeat;
		}
		.wideIcon
		{
			width: 32px;
			height: 16px;
			background-repeat: no-repeat;
		}
		
		
		.roomchatImage { background-image: url('img/chat.png'); }
		.channelListImage { background-image: url('img/channellist.png'); }
		.privchatImage { background-image: url('img/blueuser.png'); }
		.roomchatPlusImage { background-image: url('img/chat-plus.png'); }
		.privchatPlusImage { background-image: url('img/blueuser-plus.png'); }
		.battlePlusImage { background-image: url('img/battle-plus.png'); }
		.closeImage { background-image: url('img/Remove.png'); }
		.plusImage { background-image: url('img/plus-small.png'); }
		
		.playImage { background-image: url('img/play.png'); }
		.specImage { background-image: url('img/spec.png'); }
		
		.mapImage { background-image: url('img/map.png'); }
		.boxesImage { background-image: url('img/boxes.png'); }
		.boxesPlusImage { background-image: url('img/boxes-plus.png'); }
		.boxesMinusImage { background-image: url('img/boxes-minus.png'); }
		
		.startImage { background-image: url('img/battle.png'); }
		.settingsImage { background-image: url('img/wrench.png'); }
		.blobbyImage { background-image: url('img/blobby-small.png'); }
		
		.autoJoinImage { background-image: url('img/heart_small.png'); }
		.noAutoJoinImage { background-image: url('img/heart_small_empty.png'); }
		
		.subscribeImage { background-image: url('img/news_subscribe.png'); }
		.unsubscribeImage { background-image: url('img/news_unsubscribe.png'); }
		
		.botPlusImage { background-image: url('img/robot_plus.png'); }
		
		.colorsImage { background-image: url('img/colors.png'); }
		
		.searchImage { background-image: url('img/search.png'); }
		
		.removeDropdownArrow .dijitArrowButtonInner{
			display: none !important;
		}
		.dojoxGridCell
		{
			padding:0px !important;
		}
		
	</style>
	
	<script type="text/javascript" src="js/tokenizer-1.0.1.js"></script>
	<script type="text/javascript" src="js/rtfparser.js"></script>
	<script type="text/javascript" src="js/MD5.js"></script>
	<script src="http://java.com/js/deployJava.js"></script>
	<script type="text/javascript">
		var cacheString = 'ai';
		var lastRev = '<?php echo $lastRev; ?>';
		var appletSize = <?php echo $appletsize; ?>;
		//var ech = console.log;
		var echo = function(a,b,c,d){console.log(a,b,c,d);}; //chrome has issue with direct assigning of this function
		var java_socket_bridge_ready_flag = false;
		
		MD5.b64pad = "=";
		
		
		// Java socket
		function java_socket_bridge_ready()
		{
			console.log('java_socket_bridge_ready_flag')
			java_socket_bridge_ready_flag = true;
			
			//not sure why this happens, need to investigate
			if( typeof document.getElementById('JavaSocketBridge').connect !== 'function' )
			{
				java_socket_bridge_ready_flag = false;
			}
		}
		function on_socket_get( message )
		{
			uberCommunicator(message)
		}
		function uberCommunicator(msg){}
		function commandStream(msg){}


		function getCookie(c_name)
		{
			var i,x,y,ARRcookies=document.cookie.split(";");
			for (i=0;i<ARRcookies.length;i++)
			{
				x=ARRcookies[i].substr(0,ARRcookies[i].indexOf("="));
				y=ARRcookies[i].substr(ARRcookies[i].indexOf("=")+1);
				x=x.replace(/^\s+|\s+$/g,"");
				if (x==c_name)
				{
					return unescape(y);
				}
			}
		}
		
		function setCookie(c_name,value,exdays)
		{
			var exdate=new Date();
			exdate.setDate(exdate.getDate() + exdays);
			var c_value=escape(value) + ((exdays==null) ? "" : "; expires="+exdate.toUTCString());
			document.cookie=c_name + "=" + c_value;
		}
		
		String.prototype.trim = function()
		{
			return this.replace(/^\s+|\s+$/g,"");
		}
		Array.prototype.remove=function(s)
		{
			var i = this.indexOf(s);
			if(this.indexOf(s) != -1)this.splice(i, 1);
		}
		
		function findPos(obj)
		{
			var curleft = 0, curtop = 0;
			if (obj.offsetParent) {
				do {
					curleft += obj.offsetLeft;
					curtop += obj.offsetTop;
				} while (obj = obj.offsetParent);
				return { x: curleft, y: curtop };
			}
			return undefined;
		}
		
		function getMouseCoord(obj, e)
		{
			var pos, x, y
			pos = findPos(obj);
			x = e.pageX - pos.x;
			y = e.pageY - pos.y;
			return {'x':x, 'y':y};
		}
		
		function makeLinks(str, color)
		{
			var urlExp, style;
			style = '';
			if( color )
			{
				style = 'style="color:'+ color +'"';
			}
			urlExp = /(\b(www\.|(https?|ftp|file):\/\/)[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
			str = str.replace( urlExp, "<a href='$1' target='_blank' " + style + ">$1</a>" );
			urlExp = /(href='www)/ig;
			str = str.replace( /href='www/gi, "href='http://www" );
			
			return str;
		}
		
		var BrowserDetect = {
			init: function () {
				this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
				this.version = this.searchVersion(navigator.userAgent)
					|| this.searchVersion(navigator.appVersion)
					|| "an unknown version";
				this.OS = this.searchString(this.dataOS) || "an unknown OS";
			},
			searchString: function (data) {
				for (var i=0;i<data.length;i++)	{
					var dataString = data[i].string;
					var dataProp = data[i].prop;
					this.versionSearchString = data[i].versionSearch || data[i].identity;
					if (dataString) {
						if (dataString.indexOf(data[i].subString) != -1)
							return data[i].identity;
					}
					else if (dataProp)
						return data[i].identity;
				}
			},
			searchVersion: function (dataString) {
				var index = dataString.indexOf(this.versionSearchString);
				if (index == -1) return;
				return parseFloat(dataString.substring(index+this.versionSearchString.length+1));
			},
			dataBrowser: [
				{
					string: navigator.userAgent,
					subString: "Chrome",
					identity: "Chrome"
				},
				{ 	string: navigator.userAgent,
					subString: "OmniWeb",
					versionSearch: "OmniWeb/",
					identity: "OmniWeb"
				},
				{
					string: navigator.vendor,
					subString: "Apple",
					identity: "Safari",
					versionSearch: "Version"
				},
				{
					prop: window.opera,
					identity: "Opera",
					versionSearch: "Version"
				},
				{
					string: navigator.vendor,
					subString: "iCab",
					identity: "iCab"
				},
				{
					string: navigator.vendor,
					subString: "KDE",
					identity: "Konqueror"
				},
				{
					string: navigator.userAgent,
					subString: "Firefox",
					identity: "Firefox"
				},
				{
					string: navigator.vendor,
					subString: "Camino",
					identity: "Camino"
				},
				{		// for newer Netscapes (6+)
					string: navigator.userAgent,
					subString: "Netscape",
					identity: "Netscape"
				},
				{
					string: navigator.userAgent,
					subString: "MSIE",
					identity: "Explorer",
					versionSearch: "MSIE"
				},
				{
					string: navigator.userAgent,
					subString: "Gecko",
					identity: "Mozilla",
					versionSearch: "rv"
				},
				{ 		// for older Netscapes (4-)
					string: navigator.userAgent,
					subString: "Mozilla",
					identity: "Netscape",
					versionSearch: "Mozilla"
				}
			],
			dataOS : [
				{
					string: navigator.platform,
					subString: "Win",
					identity: "Windows"
				},
				{
					string: navigator.platform,
					subString: "Mac",
					identity: "Mac"
				},
				{
					   string: navigator.userAgent,
					   subString: "iPhone",
					   identity: "iPhone/iPod"
				},
				{
					string: navigator.platform,
					subString: "Linux",
					identity: "Linux"
				}
			]
		
		};
		BrowserDetect.init();
		
		function addCommas(nStr)
		{
			nStr += '';
			x = nStr.split('.');
			x1 = x[0];
			x2 = x.length > 1 ? '.' + x[1] : '';
			var rgx = /(\d+)(\d{3})/;
			while (rgx.test(x1)) {
				x1 = x1.replace(rgx, '$1' + ',' + '$2');
			}
			return x1 + x2;
		}
		
		// dojo
		var dojoConfig = (function(){
			//var path = location.pathname.replace(/\/[^/]+$/, "") + 'lwidgets/';
			var base = location.href.split("/");
			base.pop();
			base = base.join("/");
			var path = base + '/lwidgets';
			return {
				async: true,
				isDebug: true,
				//baseUrl:'./lwidets',
				parseOnLoad:false,
				packages: [
					{ name: "lwidgets", location: path, main:'Lobby' }
				],
				/*
				'aliases':[
					[  'lwidgets.ToggleIconButton', 'http://localhost/weblobby/lwidgets/ToggleIconButton' ]
				]
				*/
			};
		})();
    </script>
	<script src="http://ajax.googleapis.com/ajax/libs/dojo/1.7.2/dojo/dojo.js" data-dojo-config="async:true"></script>
	<script type="text/javascript">
		require(
			[
				"dojo",
				//"lwidgets",
				"lwidgets/Lobby",
				
				//extras
				
				"dojo/parser",
				
				//"dojo/ready" //use with parser
				
				'dojox/grid/_FocusManager',
				"dojo/domReady!"
			],
			function(dojo, Lobby ){
			
			var lobby;
			
			dojox.grid._FocusManager.prototype._delayedHeaderFocus = function(){
				if(this.isNavHeader()){
					this.focusHeader();
					//this.grid.domNode.focus();
				}
			}
			
			uberCommunicator = function(msg)
			{
				dojo.publish('Lobby/receive', [{'msg':msg }]  )
			}
			commandStream = function( cmdName, line )
			{
				dojo.publish('Lobby/commandStream', [{'line':line, 'cmdName':cmdName }]  )
			}
			
				
			lobby = new Lobby({
				'lname':'Lobby1',
				'versionNum':lastRev
			});
			lobby.placeAt('lobbydiv');
			//lobby.startup();
			lobby.startup2();
			
		
			
			//test commands here
			//uberCommunicator('JOINFAILED 1up you cant join');
			
		});//require
		
	</script>

</head>
<body class="claro">
	<noscript>
	Spring Web Lobby - Please enable javascript in your browser. You will also need the latest version of Java.
	</noscript>
	<div id="lobbydiv" style="position:absolute; top:<?php echo $lobbytop; ?>px; bottom:10px; left:10px; right:10px; "></div>
	
	<div>
		<applet id="JavaSocketBridge" archive="jar/JavaSocketBridge.jar" code="JavaSocketBridge.class" width="0" height="0"></applet>
	</div>
	
	
	<script>
	//JUnitSync
		var attributes = {
			id:'WeblobbyApplet',
			//code:'com.weblobby.applet.WeblobbyApplet.class',archive:'Weblobby-1.0-SNAPSHOT.jar',
			code:'com.springrts.unitsync.WeblobbyApplet.class',archive:'jar/unitsync-0.3-SNAPSHOT.jar',
			width:appletSize, height:appletSize} ;
		var parameters = {};
		var version = '1.6' ;
		deployJava.runApplet(attributes, parameters, version);
	</script>
</body>
</html>